#!/bin/sh
#AUHTOR: Marco Tulio Duenas
#VERSION: 1.2
#DESCRIPTION: Tool to create .gds packages
#LICENSE: GPLv3
#LAST MODIFICATION DATE: 05-20-2023
#CHANGELOG:
#	1.1: Adding -p option for create a simple template for the mantainer insert informations about the package

# Removing unicode support for better performance
export LC_ALL=C
export LANG=c
export VERBOSE=0
goldsteinExtension="gds"

# This function creates .gds packages
fn_createPkg() {
	pkgName="$1"

	if [ "$VERBOSE" = '1' ]; then
		if tar -cvf ../${pkgName} .; then
			printf '%s\n' "Package createad ../${pkgName}"
		else
			printf '%s\n' "Couldn't crete ${pkgName}"
		fi
	else

		if tar -cf ../${pkgName} .; then
			printf '%s\n' "Package createad ../${pkgName}"
			return 0
		else
			printf '%s\n' "Couldn't crete ${pkgName}"
			exit 1
		fi

	fi

}

# This function verify is the package name is correct
# No spaces and other requirements
fn_verifyPackage() {
	pkgName="$@"

	#Checking for file extension
	if ! echo "$pkgName" | grep "\b${goldsteinExtension}\b"; then
		printf '%s\n' "The file extension should be ${goldsteinExtension}"
		exit 1
	fi

	#Checking for spaces in package name
	if echo $pkgName | grep -qE "[[:space:]]+"; then
		printf "Don't use spaces on your package name\n"
		exit 1
	fi

	#Checking hyphen count
	hyphenCount=$(echo "${pkgName}" | grep -o "-" | wc -l)
	if [ "$hyphenCount" -lt 2 ] || [ "$hyphenCount" -gt 2 ]; then
		printf '%s\n' "Use 2 hyphens! follow the pattern"
		printf '%s\n' "packagename-version-build.gds"
		exit 1
	fi

}

fn_usage() {
	cat <<EOF
goldstein-create - Designed by Marco Tulio (marcot.dns@gmail.com)
	
create, -c - Creates the package without using verbose, you should be in the root
directory of the package.
verbose, -v -  Creates the package using verbose	
EOF

}

fn_packageData() {
	mkdir -v data
	cat <<EOF >data/info
#Mantainer='Marco Tulio Duenas'
#Package name =''
#Desc=''                                                                                                             
#URL=''
EOF
}

if [ -z "$1" ]; then
	fn_usage
fi

while [ -n "$1" ]; do
	case "$1" in
		create | -c)
			CMD="$1"
			shift
		;;

		package-data | -p)
			CMD="package-data"
			shift
		;;

		verbose | -v)
			VERBOSE=1
			shift
		;;

		*.gds)
			PKG="$1"
			shift
		;;

		*)
			fn_usage
			exit 1
		;;
	esac
done

case "$CMD" in
create | -c)
	if [ -z "$CMD" ]; then #If $1 is null
		printf '%s\n' "Package name is null"
		exit 1
	fi
	fn_verifyPackage "$PKG" #Veryfing prerequisites
	fn_createPkg "$PKG"
	;;

package-data | -p)
	fn_packageData
	;;
esac
